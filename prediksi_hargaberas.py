# -*- coding: utf-8 -*-
"""Prediksi_HargaBeras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PcxomW0jJxVD-v6PfCl7VNOREjs9TDqm
"""

import pandas as pd

def xlsx_to_csv(input_file, output_file):
    try:
        # Baca file Excel
        df = pd.read_excel(input_file)

        # Tulis ke file CSV
        df.to_csv(output_file, index=False)

        print(f"Konversi dari {input_file} ke {output_file} berhasil.")

    except Exception as e:
        print(f"Terjadi kesalahan: {str(e)}")

# Gantilah '/content/Harga Konsumen_Eceran Beras di Kota Bandung.xlsx' dengan path file Excel yang ingin Anda konversi
# Ganti 'output_file.csv' dengan nama file CSV yang ingin Anda hasilkan

import csv

# Baca file CSV dengan delimiter titik koma
with open('bps.csv', 'r') as input_file:
    reader = csv.reader(input_file, delimiter=';')
    data = list(reader)

# Tulis kembali file CSV dengan delimiter koma
with open('bps_dengan_koma.csv', 'w', newline='') as output_file:
    writer = csv.writer(output_file, delimiter=',')
    writer.writerows(data)


import pandas as pd

# Ganti 'nama_file.csv' dengan nama file yang sesuai
nama_file = 'bps_dengan_koma.csv'

# Membaca file CSV
df = pd.read_csv(nama_file)

# Menampilkan beberapa baris pertama dari data
print(df.head())

print(df)

df = df.dropna()

df

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Mengubah nama bulan menjadi angka (misalnya, Januari -> 1, Februari -> 2, dst.)
bulan_to_angka = {'Januari': 1, 'Februari': 2, 'Maret': 3, 'April': 4, 'Mei': 5, 'Juni': 6,
                  'Juli': 7, 'Agustus': 8, 'September': 9, 'Oktober': 10, 'November': 11, 'Desember': 12, 'Tahunan': 13}

df['nama_bulan'] = df['nama_bulan'].map(bulan_to_angka)

# Membuat fitur-fitur yang akan digunakan untuk prediksi
X = df[['nama_tahun', 'nama_bulan']]
y = df['data_content']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X

import xgboost as xgb
model = xgb.XGBRegressor()





# Membuat model regresi linear
# model = LinearRegression()

# Melatih model
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Menghitung mean squared error sebagai metrik evaluasi
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

y_pred

# Prediksi harga untuk data baru
new_data = {'nama_tahun': [2024.0],
            'nama_bulan': [1]}  # contoh: Juni
new_df = pd.DataFrame(new_data)

# Melakukan prediksi harga untuk data baru
predicted_price = model.predict(new_df)
print(f'Prediksi Harga: {predicted_price[0]}')

from sklearn.metrics import mean_squared_error, r2_score

# Fungsi untuk membuat dataframe baru berdasarkan bulan dan tahun
def generate_dataframe(year, months):
    data = {'nama_tahun': [year] * len(months), 'nama_bulan': months}
    return pd.DataFrame(data)

# Fungsi untuk mengevaluasi model dan menampilkan hasil
def evaluate_and_visualize(model, X_test, y_test):
    # Melakukan prediksi pada data uji
    y_pred = model.predict(X_test)

    # Menghitung mean squared error sebagai metrik evaluasi
    mse = mean_squared_error(y_test, y_pred)
    print(f'Mean Squared Error: {mse}')

    # Menghitung koefisien determinasi
    r_squared = r2_score(y_test, y_pred)

    # Menampilkan presentase akurasi
    accuracy_percentage = r_squared * 100
    print(f'Koefisien Determinasi (R-squared): {r_squared:.2f}')
    print(f'Presentase Akurasi: {accuracy_percentage:.2f}%')

    # Visualisasi hasil prediksi
    plt.scatter(X_test['nama_bulan'], y_test, color='black', label='Data Aktual')
    plt.scatter(X_test['nama_bulan'], y_pred, color='blue', label='Prediksi')
    plt.xlabel('Bulan')
    plt.ylabel('Harga')
    plt.title('Perbandingan Data Aktual dan Prediksi')
    plt.legend()

    # Menambahkan teks untuk presentase akurasi pada grafik
    plt.text(0.5, 0.9, f'Akurasi: {accuracy_percentage:.2f}%', horizontalalignment='center', verticalalignment='center', transform=plt.gca().transAxes, bbox=dict(facecolor='white', alpha=0.7))

    plt.show()

# Contoh penggunaan
# Gantilah ini dengan cara Anda memuat dan mempersiapkan data
# ...

# Gantilah ini dengan model yang Anda inginkan
model = xgb.XGBRegressor()

# Melatih model
model.fit(X_train, y_train)

# Memanggil fungsi untuk mengevaluasi dan memvisualisasikan hasil
evaluate_and_visualize(model, X_test, y_test)

import pandas as pd
import matplotlib.pyplot as plt

# Fungsi untuk membuat dataframe untuk satu tahun penuh
def generate_full_year_dataframe(year):
    months = list(range(1, 13))
    data = {'nama_tahun': [year] * 12, 'nama_bulan': months}
    return pd.DataFrame(data)

# Membuat dataframe untuk tahun 2024
year_to_predict = 2022
full_year_df = generate_full_year_dataframe(year_to_predict)

# Melakukan prediksi harga untuk setiap bulan dalam tahun tersebut
predicted_prices_full_year = model.predict(full_year_df[['nama_tahun', 'nama_bulan']])

# Menyertakan hasil prediksi ke dalam dataframe
full_year_df['Prediksi_Harga'] = predicted_prices_full_year

# Visualisasi hasil prediksi untuk satu tahun penuh
plt.plot(full_year_df['nama_bulan'], full_year_df['Prediksi_Harga'], marker='o', label='Prediksi Harga')
plt.xlabel('Bulan')
plt.ylabel('Harga')
plt.title(f'Prediksi Harga untuk Tahun {year_to_predict}')
plt.legend()
plt.show()

import pandas as pd
import h5py
import numpy as np

# Assuming you have the 'model' variable defined somewhere
# model = ...

# Fungsi untuk membuat dataframe untuk satu tahun penuh
def generate_full_year_dataframe(year):
    months = list(range(1, 13))
    data = {'nama_tahun': [year] * 12, 'nama_bulan': months}
    return pd.DataFrame(data)

# Membuat dataframe untuk tahun 2024
year_to_predict = 2024
full_year_df = generate_full_year_dataframe(year_to_predict)

# Melakukan prediksi harga untuk setiap bulan dalam tahun tersebut
predicted_prices_full_year = model.predict(full_year_df[['nama_tahun', 'nama_bulan']])

# Menyertakan hasil prediksi ke dalam dataframe
full_year_df['Prediksi_Harga'] = predicted_prices_full_year

# Menentukan path lengkap untuk menyimpan file H5 di direktori Downloads
h5_file_path = 'C:\\Users\\Lenovo\\Downloads\\tubes\\predicted_prices.h5'

# Membuka file H5 dalam mode penulisan
with h5py.File(h5_file_path, 'w') as file:
    # Menyimpan DataFrame ke dalam file H5
    file.create_dataset('predicted_prices', data=full_year_df.to_numpy(), dtype='float64')

